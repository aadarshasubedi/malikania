/*
 * Id.h -- player id generator
 *
 * Copyright (c) 2013, 2014, 2015 Malikania Authors
 *
 * Permission to use, copy, modify, and/or distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#ifndef _MALIKANIA_LIBSERVER_ID_H_
#define _MALIKANIA_LIBSERVER_ID_H_

/**
 * @file Id.h
 * @brief Player id generator
 */

#include <queue>

namespace malikania {

/**
 * @class Id
 * @brief Player id generator
 *
 * Each player get a unique id which is generated by this simple class. When
 * a user connects, the network must use next to get the appropriate id. When
 * the user disconnect, it must release its by calling release().
 *
 * When a user release its id, it will be used before incrementing the
 * next id.
 */
class Id {
private:
	static unsigned m_current;
	static std::priority_queue<unsigned> m_reusable;

public:
	/**
	 * Get the next id for that player.
	 *
	 * @return the id
	 */
	static unsigned next() noexcept;

	/**
	 * Release the player id.
	 *
	 * @param id the id not needed anymore
	 */
	static void release(unsigned id) noexcept;

	/**
	 * Reset the ids to 0 and remove the queue.
	 *
	 * @warning this function should be used with care and only when no player are connected
	 */
	static void reset() noexcept;
};

} // !malikania

#endif // !_MALIKANIA_ID_H_
